const thaiId = require('./index')
jest.autoMockOff()

describe('verify', () => {
  test('input must be a number', () => {
    expect(thaiId.verify(null)).toBeFalsy()
    expect(thaiId.verify(true)).toBeFalsy()
    expect(thaiId.verify(false)).toBeFalsy()
    expect(thaiId.verify([])).toBeFalsy()
    expect(thaiId.verify([1, 2, 3])).toBeFalsy()
    expect(thaiId.verify({})).toBeFalsy()
    expect(thaiId.verify('')).toBeFalsy()
    expect(thaiId.verify()).toBeFalsy()
    expect(thaiId.verify(undefined)).toBeFalsy()
    expect(thaiId.verify('this-is-not-number')).toBeFalsy()
    expect(thaiId.verify('it-must-be-number-only')).toBeFalsy()
  })

  test('input length does not equal 13', () => {
    expect(thaiId.verify('0')).toBeFalsy()
    expect(thaiId.verify('1')).toBeFalsy()
    expect(thaiId.verify('0123456')).toBeFalsy()
    expect(thaiId.verify('01234567890123456789')).toBeFalsy()
  })

  test('input can be a number', () => {
    expect(thaiId.verify(3648905117162)).toBeTruthy()
  })

  test('valid checksum', () => {
    expect(thaiId.verify('3648905117162')).toBeTruthy()
    expect(thaiId.verify('1234567891020')).toBeTruthy()
    expect(thaiId.verify('3648905117090')).toBeTruthy()
    expect(thaiId.verify('1234567891011')).toBeTruthy()
    expect(thaiId.verify('3648905117031')).toBeTruthy()
    expect(thaiId.verify('1234567891062')).toBeTruthy()
    expect(thaiId.verify('3648905117022')).toBeTruthy()
    expect(thaiId.verify('1234567891003')).toBeTruthy()
    expect(thaiId.verify('3648905117073')).toBeTruthy()
    expect(thaiId.verify('1234567891054')).toBeTruthy()
    expect(thaiId.verify('3648905117014')).toBeTruthy()
    expect(thaiId.verify('1234567891305')).toBeTruthy()
    expect(thaiId.verify('3648905117065')).toBeTruthy()
    expect(thaiId.verify('1234567891046')).toBeTruthy()
    expect(thaiId.verify('3648905117006')).toBeTruthy()
    expect(thaiId.verify('1234567891097')).toBeTruthy()
    expect(thaiId.verify('3648905117707')).toBeTruthy()
    expect(thaiId.verify('1234567891038')).toBeTruthy()
    expect(thaiId.verify('3648905117308')).toBeTruthy()
    expect(thaiId.verify('1234567891089')).toBeTruthy()
    expect(thaiId.verify('3648905117049')).toBeTruthy()
  })

  test('invalid checksum', () => {
    expect(thaiId.verify('1234567891021')).toBeFalsy()
    expect(thaiId.verify('3648905117092')).toBeFalsy()
    expect(thaiId.verify('1234567891012')).toBeFalsy()
    expect(thaiId.verify('3648905117033')).toBeFalsy()
    expect(thaiId.verify('1234567891063')).toBeFalsy()
    expect(thaiId.verify('3648905117024')).toBeFalsy()
    expect(thaiId.verify('1234567891004')).toBeFalsy()
    expect(thaiId.verify('3648905117075')).toBeFalsy()
    expect(thaiId.verify('1234567891055')).toBeFalsy()
    expect(thaiId.verify('3648905117016')).toBeFalsy()
    expect(thaiId.verify('1234567891306')).toBeFalsy()
    expect(thaiId.verify('3648905117067')).toBeFalsy()
    expect(thaiId.verify('1234567891047')).toBeFalsy()
    expect(thaiId.verify('3648905117008')).toBeFalsy()
    expect(thaiId.verify('1234567891098')).toBeFalsy()
    expect(thaiId.verify('3648905117709')).toBeFalsy()
    expect(thaiId.verify('1234567891039')).toBeFalsy()
    expect(thaiId.verify('3648905117300')).toBeFalsy()
    expect(thaiId.verify('1234567891080')).toBeFalsy()
    expect(thaiId.verify('3648905117041')).toBeFalsy()
  })
})

describe('random', () => {
  test('normal', () => {
    for (let i = 0; i < 20; i++) {
      const id = thaiId.random()
      expect(thaiId.verify(id)).toBeTruthy()
    }
  })
})
